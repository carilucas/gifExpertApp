{"version":3,"sources":["components.js/AddCategory.js","helpers/GetGifs.js","components.js/GifGridItem.js","components.js/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","autoFocus","getGifs","category","a","fetch","encodeURI","respuesta","json","data","gifs","map","img","id","title","url","images","downsized_medium","Error","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","toUpperCase","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"0MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACTC,mBAAS,IADA,mBACtCC,EADsC,KAC1BC,EAD0B,KAY7C,OACG,sBAAMC,OAAO,GAAGC,SARE,SAACC,GACnBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAO,IAC1BT,GAAc,SAAAU,GAAU,OAAGR,GAAH,mBAAiBQ,OACzCP,EAAc,MAIjB,SACG,uBACGQ,KAAK,OACLC,MAAOV,EACPW,SAfiB,SAAAP,GACvBH,EAAcG,EAAEQ,OAAOF,QAejBG,YAAY,mBACZC,WAAS,O,8BCnBRC,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,sEAEF,mCAFE,SAGOC,MAAM,0CAAD,OAA4CC,UAAUH,GAAtD,6BADd,qCAFE,cAGXI,EAHW,gBAIIA,EAAUC,OAJd,uBAIVC,EAJU,EAIVA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MAAG,CACzBC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MAAQF,EAAIE,MAAQ,gBAC9BC,IAAIH,EAAII,OAAOC,iBAAiBF,IAAMH,EAAII,OAAOC,iBAAiBF,IAAM,4BAT1D,kBAWVL,GAXU,wCAaX,IAAIQ,MAAJ,MAbW,0DAAH,sDCDPC,EAAc,SAAC,GAAiB,IAAhBL,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAEhC,OACG,sBAAKK,UAAU,yCAAf,UACG,6BAAKN,IACL,qBAAKO,IAAKN,EAAKO,IAAKR,QCFhBS,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACbjB,mBAAS,CAChCuB,KAAK,GACLe,SAAS,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OAVAC,qBAAW,WACRzB,EAAQC,GACPyB,MAAK,SAAAlB,GACHgB,EAAS,CACNjB,KAAKC,EACLc,SAAQ,SAGf,CAACrB,IAEIsB,EDXuBI,CAAa1B,GAA/Ba,EAFwB,EAE7BP,KAAYe,EAFiB,EAEjBA,QACnB,OACG,qCACIA,GAAW,oBAAIJ,UAAU,mCAAd,yBACZ,oBAAIA,UAAU,oCAAd,SAAmDjB,EAAS2B,gBAC5D,qBAAKV,UAAU,YAAf,SAEMJ,EAAOL,KAAI,SAAAC,GAAG,OAAE,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBmB,IAAKnB,EAAIC,eEVjDmB,EAAe,WAAO,IAAD,EAEK9C,mBAAS,CAAC,WAFf,mBAExBS,EAFwB,KAEZV,EAFY,KAI/B,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEGU,EAAWgB,KAAI,SAACR,GACb,OAAM,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCVvD8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7c1dc8b7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n   const [inputValue, setInputValue] = useState('');\n   const handleInputChange = e =>{\n      setInputValue(e.target.value);\n   }\n   const handleSubmit = (e)=>{\n      e.preventDefault();\n      if (inputValue.trim().length>2) {\n         setCategories(categories=>[inputValue,...categories]);\n         setInputValue('')\n      }\n   }\n   return (\n      <form action=\"\" onSubmit={handleSubmit}>\n         <input \n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            placeholder=\"Ingrese un anime\"\n            autoFocus\n         />\n      </form>\n   )\n}\n\nAddCategory.propTypes = {\n   setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifs = async(category)=>{\n   try {\n      const apiKey = 'w96qRFI3PbHoipqO9YaDTyfOo0SPwNlF'\n      const respuesta = await fetch(`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${apiKey}`);\n      const {data} = await respuesta.json();\n      \n      const gifs = data.map(img=>({\n         id:img.id,\n         title:img.title ? img.title : 'Sin TÃ­tulo',\n         url:img.images.downsized_medium.url ? img.images.downsized_medium.url : 'No existe esta imagen'\n      }));\n      return gifs;\n   } catch (error) {\n      throw new Error(error)\n   }\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n   \n   return (\n      <div className=\"animate__animated animate__fadeIn card\">\n         <h4>{title}</h4>\n         <img src={url} alt={title}/>\n      </div>\n   )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n    \n   const {data:images,loading} = useFetchGifs(category);\n   return(\n      <>\n         {loading && <h4 className=\"animate__animated animate__flash\">Cargando...</h4>}\n         <h3 className=\"animate__animated animate__fadeIn\">{category.toUpperCase()}</h3>\n         <div className=\"card-grid\">\n            {\n               images.map(img=><GifGridItem {...img} key={img.id}/>)\n            }\n         </div>\n      </>\n   )\n}\n","import {useState,useEffect} from 'react';\nimport {getGifs} from '../helpers/GetGifs'\n\nexport const useFetchGifs = (category) => {\n   const [state, setState] = useState({\n      data:[],\n      loading: true\n   })\n   useEffect( ()=>{\n      getGifs(category)\n      .then(gifs=>{\n         setState({\n            data:gifs,\n            loading:false\n         });\n      })\n   },[category])\n   \n   return state;\n}\n","import React , {useState}from 'react'\nimport { AddCategory } from './components.js/AddCategory';\nimport { GifGrid } from './components.js/GifGrid';\n\nexport const GifExpertApp = () => {\n   \n   const [categories, setCategories] = useState(['naruto']);\n   \n   return (\n      <>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories={setCategories}/>\n         <hr/>\n         \n         <ul>\n         {\n            categories.map((category) =>{\n               return<GifGrid category={category} key={category}/>;\n            })\n         }\n         </ul>\n         \n      </>\n   )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}